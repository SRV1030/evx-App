import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../models/http_exception.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';

class Auth with ChangeNotifier {
  //with is for mixedin
  String _token;
  DateTime _expiryDate;
  String _userId;

  bool get isAuth {
    return token != null;
  }

  String get token {
    if (_expiryDate != null &&
        _expiryDate.isAfter(DateTime.now()) &&
        _token != null) {
      return _token;
    }
    return null;
  }
 String get userId{
   return _userId;
 }
  Future<void> _authenticate(
      String email, String password, String urlSegment) async {
    final url =
        "https://identitytoolkit.googleapis.com/v1/accounts:$urlSegment?key=AIzaSyCGX0kRKKmw8055y4ZbVlFaaeSFccywtdc"; //key=[ApiKey] replace [ApiKey] with ypur webApi key from project stting
    try {
      final response = await http.post(
        url,
        body: json.encode({
          'email': email,
          'password': password,
          'returnSecureToken':
              true, //Whether or not to return an ID and refresh token. Should always be true.
        }),
      );
      final responseData = json.decode(response.body);
      if (responseData['error'] != null) {
        //the ['error'] key is inbuilt in firebase error
        throw HttpException(responseData['error']
            ['message']); //this exception can be handled in another screens
      }
      _token = responseData['idToken'];
      _userId = responseData['localId'];
      _expiryDate = DateTime.now().add(
        Duration(
          seconds: int.parse(
            responseData['expiresIn'],
          ),
        ),
      );
      await Firestore.instance.collection('users').document(_userId).setData({
        'userName':email.substring(0,7),//Basically we use create a coolection ;usefrs' add a docuent to the path .document(authResult.user.uid) which is the id of the usr generated by firebase
        'email':email,
      });
      notifyListeners();
    } catch (error) {
      throw error;
    }

    notifyListeners();
  }
Future<void> logOut() async {
    _token = null;
    _userId = null;
    _expiryDate = null;
    
    notifyListeners();
  }
  Future<void> signUp(String email, String password) async {
    return _authenticate(email, password, "signUp");
  }

  Future<void> logIn(String email, String password) async {
    return _authenticate(email, password, "signInWithPassword");
  }
}
